definitions:
  controllers.GenerateImageRequest:
    properties:
      prompt:
        type: string
      size:
        enum:
        - 256x256
        - 512x512
        - 1024x1024
        type: string
    required:
    - prompt
    - size
    type: object
  controllers.RequestPayload:
    properties:
      prompt:
        type: string
    type: object
  models.AddCartRequest:
    properties:
      quantity:
        type: integer
      tree_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.CarbonElectricRequest:
    properties:
      electric_id:
        type: integer
      emission_factor:
        type: number
      price:
        type: number
      usage_amount:
        type: number
      usage_type:
        enum:
        - consumption
        - rupiah
        type: string
      user_id:
        type: integer
    required:
    - electric_id
    - emission_factor
    - price
    - usage_amount
    - usage_type
    - user_id
    type: object
  models.CarbonElectricResponse:
    properties:
      emission_amount:
        type: number
      emission_factor:
        type: number
      id:
        type: integer
      total_consumption:
        type: number
      usage_amount:
        type: number
      usage_type:
        type: string
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  models.CarbonFuelRequest:
    properties:
      fuel_id:
        type: integer
      usage_amount:
        type: number
      usage_type:
        type: string
      user_id:
        type: integer
    type: object
  models.CarbonFuelResponse:
    properties:
      emission_amount:
        type: number
      emission_factor:
        type: number
      fuel_id:
        type: integer
      fuel_name:
        type: string
      id:
        type: integer
      price:
        type: number
      total_consumption:
        type: number
      unit:
        type: string
      usage_amount:
        type: number
      usage_type:
        type: string
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  models.CarbonSummaryResponse:
    properties:
      electric_emission:
        type: number
      fuel_emission:
        type: number
      total_emission:
        type: number
      total_tree:
        type: integer
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  models.Electric:
    properties:
      emission_factor:
        type: number
      id:
        type: integer
      price:
        type: number
      province:
        type: string
    type: object
  models.Fuel:
    properties:
      category:
        type: string
      emission_factor:
        type: number
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      unit:
        type: string
    type: object
  models.FuelRequest:
    properties:
      category:
        type: string
      emission_factor:
        type: number
      name:
        type: string
      price:
        type: number
      unit:
        type: string
    type: object
  models.GetCartsResponse:
    properties:
      id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      tree_name:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.PaymentMethod:
    properties:
      code:
        type: string
      id:
        type: string
    type: object
  models.PaymentRequest:
    properties:
      payment_method:
        type: string
      transaction_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.PaymentResponse:
    properties:
      payment_amount:
        type: number
      payment_method:
        type: string
      payment_status:
        type: string
      redirect_url:
        type: string
      transaction_id:
        type: integer
    type: object
  models.RegisterRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.RegisterResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    type: object
  models.ReportSummary:
    properties:
      badge_status:
        type: string
      carbon_tree:
        type: integer
      donation_tree:
        type: integer
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  models.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.RoleRequest:
    properties:
      name:
        type: string
    type: object
  models.Transaction:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment_at:
        type: string
      payment_method:
        type: string
      payment_status:
        type: string
      total_price:
        type: number
      user_id:
        type: integer
    type: object
  models.Tree:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      tree_category_id:
        type: integer
    type: object
  models.TreeCategory:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.UpdatePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  models.UpdateProfileRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.UpdateProfileResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.UserProfileResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Production server
  termsOfService: http://swagger.io/terms/
  title: Carbon API
  version: "1.0"
paths:
  /ai:
    post:
      consumes:
      - application/json
      description: Generate content related to carbon emission prediction and recommendations
        using Gemini AI
      parameters:
      - description: Request payload containing the prompt
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Generate content based on the provided prompt
      tags:
      - GeminiAPI
  /ai/generate-image:
    post:
      consumes:
      - application/json
      description: Generate an image based on the given prompt and send it via email
      parameters:
      - description: Request payload containing the prompt and image size
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/controllers.GenerateImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Generate an image based on the provided prompt
      tags:
      - GeminiAPI
  /carbon-electrics:
    get:
      consumes:
      - application/json
      description: Retrieve a list of carbon electric entries for the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: List of carbon electric entries
          schema:
            items:
              $ref: '#/definitions/models.CarbonElectricResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all carbon electrics
      tags:
      - CarbonElectrics
    post:
      consumes:
      - application/json
      description: Add a new carbon electric entry for the logged-in user
      parameters:
      - description: Carbon Electric request body
        in: body
        name: carbonElectricRequest
        required: true
        schema:
          $ref: '#/definitions/models.CarbonElectricRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created carbon electric entry
          schema:
            $ref: '#/definitions/models.CarbonElectricResponse'
        "400":
          description: Invalid request payload or usage type/amount
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new carbon electric entry
      tags:
      - CarbonElectrics
  /carbon-electrics/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific carbon electric entry by its unique ID
      parameters:
      - description: Carbon Electric ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted carbon electric entry
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid carbon electric ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Carbon electric not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a carbon electric entry
      tags:
      - CarbonElectrics
    get:
      consumes:
      - application/json
      description: Fetch details of a specific carbon electric entry by its unique
        ID
      parameters:
      - description: Carbon Electric ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Carbon electric entry details
          schema:
            $ref: '#/definitions/models.CarbonElectricResponse'
        "400":
          description: Invalid carbon electric ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Carbon electric not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a carbon electric entry by ID
      tags:
      - CarbonElectrics
  /carbon-fuels:
    get:
      consumes:
      - application/json
      description: Get all carbon fuels for a specific user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CarbonFuelResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all carbon fuels
      tags:
      - CarbonFuels
    post:
      consumes:
      - application/json
      description: Create a new carbon fuel entry for a user with specific fuel data
      parameters:
      - description: Create Carbon Fuel Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CarbonFuelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CarbonFuelResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new carbon fuel entry
      tags:
      - CarbonFuels
  /carbon-fuels/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a carbon fuel entry by ID for a specific user
      parameters:
      - description: Carbon Fuel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a carbon fuel entry
      tags:
      - CarbonFuels
    get:
      consumes:
      - application/json
      description: Get a specific carbon fuel by its ID
      parameters:
      - description: Carbon Fuel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CarbonFuelResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get carbon fuel by ID
      tags:
      - CarbonFuels
  /carbon-summary:
    get:
      consumes:
      - application/json
      description: Get the carbon summary for a specific user, including fuel and
        electric emissions, total emissions, and total trees equivalent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CarbonSummaryResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get carbon summary
      tags:
      - CarbonSummary
  /carts:
    get:
      consumes:
      - application/json
      description: Retrieve all cart items for a specific user by their user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetCartsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all carts for a specific user
      tags:
      - Carts
    post:
      consumes:
      - application/json
      description: Add a specified tree item to the user's cart
      parameters:
      - description: Add Tree to Cart Request
        in: body
        name: addCartRequest
        required: true
        schema:
          $ref: '#/definitions/models.AddCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a tree to the cart
      tags:
      - Carts
  /carts/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specified tree item from the user's cart by ID
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a tree from the cart
      tags:
      - Carts
  /electrics:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all electric records
      produces:
      - application/json
      responses:
        "200":
          description: List of electrics
          schema:
            items:
              $ref: '#/definitions/models.Electric'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all electric data
      tags:
      - Electrics
    post:
      consumes:
      - application/json
      description: Add a new electric record to the database
      parameters:
      - description: Electric data
        in: body
        name: electric
        required: true
        schema:
          $ref: '#/definitions/models.Electric'
      produces:
      - application/json
      responses:
        "201":
          description: Created electric
          schema:
            $ref: '#/definitions/models.Electric'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new electric record
      tags:
      - Electrics
  /electrics/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an electric record from the database
      parameters:
      - description: Electric ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Electric deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid electric ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete an electric record by ID
      tags:
      - Electrics
    get:
      consumes:
      - application/json
      description: Fetch an electric record using its unique ID
      parameters:
      - description: Electric ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Electric details
          schema:
            $ref: '#/definitions/models.Electric'
        "400":
          description: Invalid electric ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Electric not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get an electric record by ID
      tags:
      - Electrics
    put:
      consumes:
      - application/json
      description: Modify the details of an existing electric record
      parameters:
      - description: Electric ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated electric data
        in: body
        name: electric
        required: true
        schema:
          $ref: '#/definitions/models.Electric'
      produces:
      - application/json
      responses:
        "200":
          description: Updated electric
          schema:
            $ref: '#/definitions/models.Electric'
        "400":
          description: Invalid electric ID or payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update an electric record by ID
      tags:
      - Electrics
  /fuels:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all fuels from cache, if not found, retrieve
        from database and cache it
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fuel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all fuels
      tags:
      - Fuels
    post:
      consumes:
      - application/json
      description: Create a new fuel record and store it in both the database and
        cache
      parameters:
      - description: Fuel Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.FuelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Fuel'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new fuel
      tags:
      - Fuels
  /fuels/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific fuel by ID from both the database and cache
      parameters:
      - description: Fuel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a fuel
      tags:
      - Fuels
    get:
      consumes:
      - application/json
      description: Retrieve a specific fuel by ID from cache, if not found, retrieve
        from database and cache it
      parameters:
      - description: Fuel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Fuel'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a fuel by ID
      tags:
      - Fuels
    put:
      consumes:
      - application/json
      description: Update a specific fuel by ID in both the database and cache
      parameters:
      - description: Fuel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fuel Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.FuelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Fuel'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing fuel
      tags:
      - Fuels
  /generate-pdf:
    post:
      consumes:
      - application/json
      description: Generate a PDF report based on emission data and send it via email
      produces:
      - application/json
      responses:
        "200":
          description: PDF generated and sent to fr081938@gmail.com
          schema:
            type: string
        "500":
          description: Error generating PDF or sending email
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Generate a PDF report for carbon emissions
      tags:
      - Reports
  /generate-pdf-summary:
    post:
      consumes:
      - application/json
      description: Generate a summary PDF report with emission data and AI-generated
        predictions, then send it via email
      produces:
      - application/json
      responses:
        "200":
          description: PDF generated and sent to fr081938@gmail.com
          schema:
            type: string
        "500":
          description: Error generating PDF or sending email
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Generate a summary PDF report
      tags:
      - Reports
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /payment-methods:
    get:
      consumes:
      - application/json
      description: Fetch all payment methods from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PaymentMethod'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all payment methods
      tags:
      - PaymentMethods
    post:
      consumes:
      - application/json
      description: Create a new payment method by providing the necessary details
      parameters:
      - description: New Payment Method
        in: body
        name: paymentMethod
        required: true
        schema:
          $ref: '#/definitions/models.PaymentMethod'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PaymentMethod'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new payment method
      tags:
      - PaymentMethods
  /payment-methods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing payment method by its ID
      parameters:
      - description: Payment Method ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a payment method
      tags:
      - PaymentMethods
    put:
      consumes:
      - application/json
      description: Update the details of an existing payment method by its ID
      parameters:
      - description: Payment Method ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Payment Method
        in: body
        name: paymentMethod
        required: true
        schema:
          $ref: '#/definitions/models.PaymentMethod'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentMethod'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an existing payment method
      tags:
      - PaymentMethods
  /payments:
    post:
      consumes:
      - application/json
      description: Create a new payment request for a user, specifying the transaction
        ID, payment method, and other details
      parameters:
      - description: Payment Request
        in: body
        name: paymentRequest
        required: true
        schema:
          $ref: '#/definitions/models.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new payment
      tags:
      - Payments
  /payments/verify/{id}:
    get:
      consumes:
      - application/json
      description: Verify the status of a payment transaction by its transaction ID
        and status (either success or failed)
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payment Status
        enum:
        - success
        - failed
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Verify a payment transaction
      tags:
      - Payments
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, and password
      parameters:
      - description: Register User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /reports/summary:
    get:
      consumes:
      - application/json
      description: Retrieve a summary report for the authenticated user, including
        user details and statistics such as carbon trees and donation trees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReportSummary'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get the report summary for a user
      tags:
      - Reports
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add a new role to the system
      parameters:
      - description: Role request payload
        in: body
        name: roleRequest
        required: true
        schema:
          $ref: '#/definitions/models.RoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created role
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific role by its unique ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted role
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid role ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific role by its unique ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid role ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a role by ID
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update details of an existing role by its unique ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role update request payload
        in: body
        name: roleRequest
        required: true
        schema:
          $ref: '#/definitions/models.RoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated role
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid role ID or request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - Roles
  /transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction for the authenticated user
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new transaction
      tags:
      - Transactions
  /tree-categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all tree categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TreeCategory'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all tree categories
      tags:
      - TreeCategories
    post:
      consumes:
      - application/json
      description: Create a new tree category with a unique name
      parameters:
      - description: Tree Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.TreeCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TreeCategory'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new tree category
      tags:
      - TreeCategories
  /tree-categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a tree category by ID
      parameters:
      - description: Tree Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a tree category
      tags:
      - TreeCategories
    get:
      consumes:
      - application/json
      description: Retrieve a tree category by its ID
      parameters:
      - description: Tree Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TreeCategory'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get tree category by ID
      tags:
      - TreeCategories
    put:
      consumes:
      - application/json
      description: Update a tree category by ID
      parameters:
      - description: Tree Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tree Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.TreeCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TreeCategory'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing tree category
      tags:
      - TreeCategories
  /trees:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all trees, checking consistency with the cache
        and database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tree'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all trees
      tags:
      - Trees
    post:
      consumes:
      - application/json
      description: Add a new tree to the database and cache
      parameters:
      - description: Tree data
        in: body
        name: tree
        required: true
        schema:
          $ref: '#/definitions/models.Tree'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tree'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new tree
      tags:
      - Trees
  /trees/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a tree by ID from the database and cache
      parameters:
      - description: Tree ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a tree
      tags:
      - Trees
    get:
      consumes:
      - application/json
      description: Retrieve a specific tree by ID, checking cache first, then the
        database
      parameters:
      - description: Tree ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tree'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get tree by ID
      tags:
      - Trees
    put:
      consumes:
      - application/json
      description: Modify an existing tree by ID and update the cache
      parameters:
      - description: Tree ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tree data
        in: body
        name: tree
        required: true
        schema:
          $ref: '#/definitions/models.Tree'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tree'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing tree
      tags:
      - Trees
  /users/logout:
    post:
      description: Invalidate the user's authentication token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Users
  /users/profile:
    get:
      description: Retrieve the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user profile fields excluding email
      parameters:
      - description: Update Profile
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
  /users/update-password:
    put:
      consumes:
      - application/json
      description: Update user password with the current and new password
      parameters:
      - description: Update Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
